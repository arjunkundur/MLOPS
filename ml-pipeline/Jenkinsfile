pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        SAGEMAKER_PROJECT = 'my-sagemaker-aws-jenkins-project1'
        SAGEMAKER_ROLE = 'arn:aws:iam::975050337104:role/service-role/AmazonSageMaker-ExecutionRole-20250311T162664'
        AWS_CREDENTIALS = credentials('aws-credentials')
        SPECIFIC_TRAINING_JOB = 'sagemaker-xgboost-2025-03-26-08-57-40-665'
        INSTANCE_TYPE = 'ml.m5.large'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[
                        $class: 'RelativeTargetDirectory',
                        relativeTargetDir: 'ml-pipeline'
                    ]],
                    userRemoteConfigs: [[url: 'https://github.com/arjunkundur/MLOPS.git']]
                ])
            }
        }

        stage('Setup Environment') {
            steps {
                dir('ml-pipeline') {
                    sh '''
                    echo "Setting up Python environment"
                    pip3 install --upgrade pip
                    pip3 install -r sagemaker_scripts/requirements.txt
                    pip3 install awscli boto3 sagemaker
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_REGION
                    '''
                }
            }
        }

        stage('Verify Training Job') {
            steps {
                dir('ml-pipeline') {
                    script {
                        echo "Verifying training job: ${SPECIFIC_TRAINING_JOB}"
                        
                        // Verify training job exists and is completed
                        def jobInfo = sh(
                            script: """
                            aws sagemaker describe-training-job \\
                                --training-job-name ${SPECIFIC_TRAINING_JOB} \\
                                --query '[TrainingJobStatus, ModelArtifacts.S3ModelArtifacts]' \\
                                --output text
                            """,
                            returnStdout: true
                        ).trim().split('\t')
                        
                        if (jobInfo[0] != 'Completed') {
                            error("Training job ${SPECIFIC_TRAINING_JOB} status: ${jobInfo[0]}")
                        }
                        
                        echo "Verified model artifacts: ${jobInfo[1]}"
                        env.MODEL_DATA_URL = jobInfo[1]
                    }
                }
            }
        }

        stage('Deploy Model') {
            steps {
                dir('ml-pipeline') {
                    script {
                        echo "Deploying model from job: ${SPECIFIC_TRAINING_JOB}"
                        
                        // Run deployment script
                        def deployOutput = sh(
                            script: """
                            python3 scripts/deploy_model.py \\
                                --project $SAGEMAKER_PROJECT \\
                                --region $AWS_REGION \\
                                --training-job-name $SPECIFIC_TRAINING_JOB \\
                                --instance-type $INSTANCE_TYPE
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "${deployOutput}"
                        
                        // Extract endpoint name
                        def endpointName = sh(
                            script: """
                            echo "${deployOutput}" | grep '^Endpoint: ' | awk '{print \$2}'
                            """,
                            returnStdout: true
                        ).trim()
                        
                        // Monitor endpoint status
                        def maxAttempts = 60
                        def interval = 30
                        
                        for (int i = 0; i < maxAttempts; i++) {
                            sleep(interval)
                            
                            def endpointStatus = sh(
                                script: """
                                aws sagemaker describe-endpoint \\
                                    --endpoint-name ${endpointName} \\
                                    --query 'EndpointStatus' \\
                                    --output text
                                """,
                                returnStdout: true
                            ).trim()
                            
                            echo "Endpoint status: ${endpointStatus}"
                            
                            if (endpointStatus == 'InService') {
                                // Verify model name contains training job ID
                                def modelName = sh(
                                    script: """
                                    aws sagemaker describe-endpoint \\
                                        --endpoint-name ${endpointName} \\
                                        --query 'ProductionVariants[0].ModelName' \\
                                        --output text
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                if (!modelName.contains(SPECIFIC_TRAINING_JOB.substring(SPECIFIC_TRAINING_JOB.length() - 8))) {
                                    error("Deployed model verification failed! Expected model from ${SPECIFIC_TRAINING_JOB}")
                                }
                                
                                echo "Successfully deployed model: ${modelName}"
                                break
                            } else if (endpointStatus == 'Failed') {
                                error("Endpoint deployment failed")
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed"
            dir('ml-pipeline') {
                sh 'rm -rf venv'
            }
        }
        success {
            echo "Pipeline succeeded!"
            // slackSend(color: 'good', message: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            echo "Pipeline failed"
            // slackSend(color: 'danger', message: "FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}
