pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        SAGEMAKER_PROJECT = 'my-sagemaker-aws-jenkins-project1'
        SAGEMAKER_ROLE = 'arn:aws:iam::975050337104:role/service-role/AmazonSageMaker-ExecutionRole-20250311T162664'
        AWS_CREDENTIALS = credentials('aws-credentials')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[
                        $class: 'RelativeTargetDirectory',
                        relativeTargetDir: 'ml-pipeline'
                    ]],
                    userRemoteConfigs: [[url: 'https://github.com/arjunkundur/MLOPS.git']]
                ])
            }
        }

        stage('Setup Environment') {
            steps {
                dir('ml-pipeline') {
                    sh '''
                    echo "Setting up Python environment"
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r sagemaker_scripts/requirements.txt
                    pip install awscli boto3 sagemaker
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_REGION
                    '''
                }
            }
        }

        stage('Verify Files') {
            steps {
                dir('ml-pipeline') {
                    sh '''
                    echo "Current directory: $(pwd)"
                    echo "Files in scripts directory:"
                    ls -l scripts/
                    echo "train.py exists: $(test -f scripts/train.py && echo 'YES' || echo 'NO')"
                    '''
                }
            }
        }

        stage('Run SageMaker Training Job') {
            steps {
                dir('ml-pipeline') {
                    script {
                        echo "Starting SageMaker training job"
                        
                        // Activate venv and run training
                        def trainingJobName = sh(
                            script: '''
                            . venv/bin/activate
                            cd scripts
                            python run_training_sm.py
                            ''', 
                            returnStdout: true
                        ).trim()
                        
                        echo "Triggered SageMaker Training Job: ${trainingJobName}"
                        env.TRAINING_JOB_NAME = trainingJobName

                        // Monitor job status with enhanced debugging
                        def maxAttempts = 120
                        def interval = 30
                        def jobStatus = ''
                        
                        for (int i = 0; i < maxAttempts; i++) {
                            sleep(interval)
                            
                            def result = sh(
                                script: """
                                . venv/bin/activate
                                aws sagemaker describe-training-job \
                                --training-job-name ${trainingJobName} \
                                --query '[TrainingJobStatus, FailureReason]' \
                                --output text
                                """,
                                returnStdout: true
                            ).trim().split('\t')
                            
                            jobStatus = result[0]
                            def failureReason = result.size() > 1 ? result[1] : ''
                            
                            echo "Training job status: ${jobStatus}"
                            
                            if (jobStatus == 'Completed') {
                                echo "Training job completed successfully"
                                break
                            } else if (jobStatus == 'Failed' || jobStatus == 'Stopped') {
                                error("Training job failed: ${failureReason}")
                            }
                        }
                        
                        if (jobStatus != 'Completed') {
                            error("Training job did not complete within the expected time")
                        }
                    }
                }
            }
        }

        stage('Deploy Model') {
            steps {
                dir('ml-pipeline') {
                    script {
                        echo "Deploying model from job: ${env.TRAINING_JOB_NAME}"
                        sh '''
                        . venv/bin/activate
                        python scripts/deploy_model.py \
                            --project $SAGEMAKER_PROJECT \
                            --region $AWS_REGION \
                            --training-job-name $TRAINING_JOB_NAME
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed"
            dir('ml-pipeline') {
                sh 'rm -rf venv'
            }
        }
        success {
            echo "Pipeline succeeded!"
            // slackSend(color: 'good', message: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            echo "Pipeline failed"
            // slackSend(color: 'danger', message: "FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}