pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        SAGEMAKER_PROJECT = 'my-sagemaker-aws-jenkins-project1'
        SAGEMAKER_ROLE = 'arn:aws:iam::975050337104:role/service-role/AmazonSageMaker-ExecutionRole-20250311T162664'
        AWS_CREDENTIALS = credentials('aws-credentials')
        INSTANCE_TYPE = 'ml.m5.large'
        PYTHON = 'python3'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[
                        $class: 'RelativeTargetDirectory',
                        relativeTargetDir: 'ml-pipeline'
                    ]],
                    userRemoteConfigs: [[url: 'https://github.com/arjunkundur/MLOPS.git']]
                ])
            }
        }

        stage('Setup Environment') {
            steps {
                dir('ml-pipeline') {
                    sh '''
                    echo "Setting up Python environment"
                    pip3 install --upgrade pip
                    pip3 install -r sagemaker_scripts/requirements.txt
                    pip3 install awscli boto3 sagemaker
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_REGION
                    '''
                }
            }
        }

        stage('Run Training Job') {
            steps {
                dir('ml-pipeline') {
                    script {
                        echo "Starting SageMaker training job"
                        
                        // Run training script and capture job name
                        env.TRAINING_JOB_NAME = sh(
                            script: """
                            ${PYTHON} scripts/run_training_sm.py \\
                                --project ${SAGEMAKER_PROJECT} \\
                                --region ${AWS_REGION} \\
                                --role ${SAGEMAKER_ROLE} \\
                                --instance-type ${INSTANCE_TYPE}
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "Triggered SageMaker Training Job: ${env.TRAINING_JOB_NAME}"

                        // Monitor training job with timeout
                        timeout(time: 120, unit: 'MINUTES') {
                            waitUntil {
                                def jobInfo = sh(
                                    script: """
                                    aws sagemaker describe-training-job \\
                                        --training-job-name ${env.TRAINING_JOB_NAME} \\
                                        --query '[TrainingJobStatus, ModelArtifacts.S3ModelArtifacts]' \\
                                        --output text
                                    """,
                                    returnStdout: true
                                ).trim().split('\t')
                                
                                echo "Training job status: ${jobInfo[0]}"
                                
                                if (jobInfo[0] == 'Failed') {
                                    error("Training job failed")
                                }
                                env.MODEL_ARTIFACTS = jobInfo[1]
                                return jobInfo[0] == 'Completed'
                            }
                        }
                        echo "✅ Training completed successfully"
                        echo "Model artifacts: ${env.MODEL_ARTIFACTS}"
                    }
                }
            }
        }

        stage('Deploy Model') {
            steps {
                dir('ml-pipeline') {
                    script {
                        env.ENDPOINT_NAME = "${SAGEMAKER_PROJECT}-endpoint"
                        echo "Starting deployment to endpoint: ${env.ENDPOINT_NAME}"
                        
                        // Deploy using Python SDK
                        def deployOutput = sh(
                            script: """
                            ${PYTHON} scripts/deploy_model.py \\
                                --endpoint-name ${env.ENDPOINT_NAME} \\
                                --model-data ${env.MODEL_ARTIFACTS} \\
                                --role-arn ${SAGEMAKER_ROLE} \\
                                --instance-type ${INSTANCE_TYPE} \\
                                --region ${AWS_REGION}
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "Deployment output:\n${deployOutput}"
                        
                        // Monitor endpoint status with timeout
                        timeout(time: 30, unit: 'MINUTES') {
                            waitUntil {
                                def endpointStatus = sh(
                                    script: """
                                    aws sagemaker describe-endpoint \\
                                        --endpoint-name ${env.ENDPOINT_NAME} \\
                                        --query 'EndpointStatus' \\
                                        --output text
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                echo "Endpoint status: ${endpointStatus}"
                                
                                if (endpointStatus == 'Failed') {
                                    error("Endpoint deployment failed")
                                }
                                return endpointStatus == 'InService'
                            }
                        }
                        
                        echo "✅ Deployment successful! Endpoint: ${env.ENDPOINT_NAME}"
                    }
                }
            }
        }

        stage('Test Endpoint') {
            steps {
                dir('ml-pipeline') {
                    script {
                        echo "Testing endpoint: ${env.ENDPOINT_NAME}"
                        def testResult = sh(
                            script: """
                            ${PYTHON} scripts/test_endpoint.py \\
                                --endpoint-name ${env.ENDPOINT_NAME} \\
                                --region ${AWS_REGION} \\
                                --data "1.0,2.0,3.0"
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "Test prediction result: ${testResult}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed"
            cleanWs()
        }
        success {
            echo "✅ Pipeline succeeded!"
            // slackSend(color: 'good', message: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            echo "❌ Pipeline failed"
            // slackSend(color: 'danger', message: "FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}